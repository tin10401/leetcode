class UnionFind
{
    public:
    int n;
    vector<int> root, rank;
    UnionFind(int n)
    {
        this->n = n;
        root.resize(n, -1), rank.resize(n, 1);
    }

    int find(int x)
    {
        if(root[x] == -1) return x;
        return root[x] = find(root[x]);
    }

    void merge(int x, int y)
    {
        int u = find(x), v = find(y);
        if(u != v)
        {
            if(rank[v] > rank[u]) swap(u, v);
            rank[u] += rank[v];
            root[v] = u;
        }
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        UnionFind root(n);
        unordered_set<int> infected(begin(initial), end(initial));
        sort(begin(initial), end(initial));
        vector<int> clean;
        for(int i = 0; i < n; i++)
        {
            if(!infected.count(i)) clean.push_back(i);
        }
        for(auto& i : clean)
        {
            for(auto& j : clean)
            {
                if(graph[i][j]) root.merge(i, j);
            }
        }

        vector<unordered_set<int>> infected_node(n);
        vector<int> count(n);
        for(int i : initial)
        {
            for(int j : clean)
            {
                if(graph[i][j]) infected_node[i].insert(root.find(j));
            }
            for(auto& j : infected_node[i])
            {
                count[j]++;
            }
        }
        int res = initial.front(), maxi = 0;
        for(auto& i : initial)
        {
            int total = 0;
            for(auto& node : infected_node[i])
            {
                if(count[node] == 1)
                {
                    total += root.rank[node];
                }
            }
            if(total > maxi)
            {
                res = i;
                maxi = total;
            }
        }
        return res;
    }
};